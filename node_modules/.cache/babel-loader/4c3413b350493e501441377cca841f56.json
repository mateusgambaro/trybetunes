{"ast":null,"code":"var _jsxFileName = \"/home/mateus/sd-014-b-project-trybetunes/src/pages/Album.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport { getMusics } from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.musicLoadingList = async () => {\n      const {\n        id,\n        loading\n      } = this.state;\n\n      if (!loading) {\n        const result = await getMusics(id);\n        this.setState({\n          loading: true,\n          musicList: result\n        });\n      }\n\n      this.artistsNames();\n    };\n\n    this.artistsNames = () => {\n      const {\n        musicList,\n        loading\n      } = this.state;\n\n      if (loading) {\n        const namesOfArtists = musicList[0].artistName;\n        const collectionNames = musicList[0].collectionName;\n        this.setState({\n          namesOfArtists,\n          collectionNames\n        });\n      }\n    };\n\n    const {\n      match: {\n        params: {\n          id: _id\n        }\n      }\n    } = props;\n    this.state = {\n      loading: false,\n      id: _id,\n      namesOfArtists: '',\n      collectionNames: '',\n      musicList: ''\n    };\n  }\n\n  componentDidMount() {\n    this.musicLoadingList();\n  }\n\n  render() {\n    const {\n      loading,\n      musicList,\n      namesOfArtists,\n      collectionNames\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Album\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        \"data-testid\": \"artist-name\",\n        children: namesOfArtists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        \"data-testid\": \"album-name\",\n        children: collectionNames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(MusicCard, {\n        albumTracks: musicList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.objectOf({\n    params: PropTypes.objectOf({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/home/mateus/sd-014-b-project-trybetunes/src/pages/Album.js"],"names":["React","PropTypes","Header","getMusics","MusicCard","Album","Component","constructor","props","musicLoadingList","id","loading","state","result","setState","musicList","artistsNames","namesOfArtists","artistName","collectionNames","collectionName","match","params","componentDidMount","render","propTypes","objectOf","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAgBnBC,gBAhBmB,GAgBA,YAAY;AAC7B,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkB,KAAKC,KAA7B;;AACA,UAAI,CAACD,OAAL,EAAc;AACZ,cAAME,MAAM,GAAG,MAAMV,SAAS,CAACO,EAAD,CAA9B;AACA,aAAKI,QAAL,CAAc;AACZH,UAAAA,OAAO,EAAE,IADG;AAEZI,UAAAA,SAAS,EAAEF;AAFC,SAAd;AAID;;AACD,WAAKG,YAAL;AACD,KA1BkB;;AAAA,SA4BnBA,YA5BmB,GA4BJ,MAAM;AACnB,YAAM;AAAED,QAAAA,SAAF;AAAaJ,QAAAA;AAAb,UAAyB,KAAKC,KAApC;;AACA,UAAID,OAAJ,EAAa;AACX,cAAMM,cAAc,GAAGF,SAAS,CAAC,CAAD,CAAT,CAAaG,UAApC;AACA,cAAMC,eAAe,GAAGJ,SAAS,CAAC,CAAD,CAAT,CAAaK,cAArC;AACA,aAAKN,QAAL,CAAc;AACZG,UAAAA,cADY;AAEZE,UAAAA;AAFY,SAAd;AAID;AACF,KAtCkB;;AAEjB,UAAM;AAAEE,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAEZ,UAAAA,EAAE,EAAFA;AAAF;AAAV;AAAT,QAAgCF,KAAtC;AACA,SAAKI,KAAL,GAAa;AACXD,MAAAA,OAAO,EAAE,KADE;AAEXD,MAAAA,EAAE,EAAFA,GAFW;AAGXO,MAAAA,cAAc,EAAE,EAHL;AAIXE,MAAAA,eAAe,EAAE,EAJN;AAKXJ,MAAAA,SAAS,EAAE;AALA,KAAb;AAOD;;AAEDQ,EAAAA,iBAAiB,GAAG;AAClB,SAAKd,gBAAL;AACD;;AA0BDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEb,MAAAA,OAAF;AAAWI,MAAAA,SAAX;AAAsBE,MAAAA,cAAtB;AAAsCE,MAAAA;AAAtC,QAA0D,KAAKP,KAArE;AACA,wBACE;AAAK,qBAAY,YAAjB;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAI,uBAAY,aAAhB;AAAA,kBAA+BK;AAA/B;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAI,uBAAY,YAAhB;AAAA,kBAA8BE;AAA9B;AAAA;AAAA;AAAA;AAAA,cAJF,EAKIR,OAAO,iBAAI,QAAC,SAAD;AAAW,QAAA,WAAW,EAAGI;AAAzB;AAAA;AAAA;AAAA;AAAA,cALf;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AApDiC;;AAuDpCV,KAAK,CAACoB,SAAN,GAAkB;AAChBJ,EAAAA,KAAK,EAAEpB,SAAS,CAACyB,QAAV,CAAmB;AACxBJ,IAAAA,MAAM,EAAErB,SAAS,CAACyB,QAAV,CAAmB;AACzBhB,MAAAA,EAAE,EAAET,SAAS,CAAC0B;AADW,KAAnB;AADgB,GAAnB,EAIJC;AALa,CAAlB;AAQA,eAAevB,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport { getMusics } from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\n\nclass Album extends React.Component {\n  constructor(props) {\n    super(props);\n    const { match: { params: { id } } } = props;\n    this.state = {\n      loading: false,\n      id,\n      namesOfArtists: '',\n      collectionNames: '',\n      musicList: '',\n    };\n  }\n\n  componentDidMount() {\n    this.musicLoadingList();\n  }\n\n  musicLoadingList = async () => {\n    const { id, loading } = this.state;\n    if (!loading) {\n      const result = await getMusics(id);\n      this.setState({\n        loading: true,\n        musicList: result,\n      });\n    }\n    this.artistsNames();\n  }\n\n  artistsNames = () => {\n    const { musicList, loading } = this.state;\n    if (loading) {\n      const namesOfArtists = musicList[0].artistName;\n      const collectionNames = musicList[0].collectionName;\n      this.setState({\n        namesOfArtists,\n        collectionNames,\n      });\n    }\n  }\n\n  render() {\n    const { loading, musicList, namesOfArtists, collectionNames } = this.state;\n    return (\n      <div data-testid=\"page-album\">\n        <Header />\n        <h2>Album</h2>\n        <h4 data-testid=\"artist-name\">{namesOfArtists}</h4>\n        <h6 data-testid=\"album-name\">{collectionNames}</h6>\n        { loading && <MusicCard albumTracks={ musicList } />}\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.objectOf({\n    params: PropTypes.objectOf({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}